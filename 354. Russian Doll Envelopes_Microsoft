class Solution {
public:
    //similar to maximum increasing subsequence using sorted vector concept and replacing similar val with curr ele at that idx
    //sort array acc to first item and if first item is equal then we use item which has higher value of second item so that it has higher chance to get fit at outer side
    static bool cmp(vector<int>&a , vector<int>&b) {
        if(a[0]==b[0]) return a[1]>b[1];
        return a[0]<b[0];
    }
    int maxEnvelopes(vector<vector<int>>& env) {
        sort(env.begin(),env.end(),cmp);

        vector<int>incOrder; //store height of envelop only(2nd ele) as first we already sorte

        incOrder.push_back(env[0][1]);

        for(int i=1;i<env.size();i++) {
            if(env[i][1] > incOrder.back()) { //definitely then start element is smaller than curr because if it is same then second ele cant be greater than prev second ele val stored in creasing order
                incOrder.push_back(env[i][1]);
            }
            else{
                int j = lower_bound(incOrder.begin(),incOrder.end(),env[i][1]) - incOrder.begin();
                incOrder[j] = env[i][1];
            }
        }
        return incOrder.size();
    }
};
