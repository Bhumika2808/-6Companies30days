/*
Basically, only 3 cases can happen:

The character appears in the first string.
The character appears in the second string.
It doesnt belong to either of them.
So we try each of the 3 case and see which of them gives the maximum answer and use chk() function 
*/
class Solution {
public:
    int checkPalindrome(string &s1,string &s2) {
        int i=0, j=s1.size()-1;
        while(i<=j) {
            if(s1[i]!=s1[j]) return -1;
            i++;j--;
        }

        i=0;j=s2.size()-1;
        while(i<=j) {
            if(s2[i]!=s2[j]) return -1;
            i++;j--;
        }
        return s1.size()*s2.size();
    }

    int solve(int idx,string &s,string s1,string s2) {
       if(idx==s.length()) {
          return checkPalindrome(s1,s2);
       }
       char ch=s[idx];
       return max(solve(idx+1,s,s1,s2),max(solve(idx+1,s,s1+ch,s2),solve(idx+1,s,s1,s2+ch)));
    }
    int maxProduct(string s) { 
        string s1="";
        string s2="";
        return solve(0,s,"","");
    }
};
